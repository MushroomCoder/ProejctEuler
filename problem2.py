"""
Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

                    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 find the sum of the even-valued terms.
------------------------------------------
for this problem, we'll calculate all fibonacci numbers under 4 millions and add them in a list,
then for each item in the list we test if it's an even-valued integer or not, if not we delete it
if yes we add it to the total sum.
"""

# first two terms of the sequence
fib_1 = 0
fib_2 = 1

# variable containing the sum
fib_sum = 0

# variable used to break out of the while loop when we reached the limit of 4 000 000
count = 0
# this list will contain in a first moment all Fibonacci numbers below 4 000 000
# then we'll remove from this list numbers that aren't multiples of 2 and sum up
# the rest to come out with the solution
fib_list = []

while count == 0:
    fib_nth = fib_1 + fib_2
    
    fib_1 = fib_2
    fib_2 = fib_nth
    
    if fib_nth < 4000000:
        fib_list.append(fib_nth)
    
    if fib_nth >= 4000000:
        count = 1

for i in fib_list:
    if i % 2 == 0:
        fib_sum += i

print(fib_sum)
